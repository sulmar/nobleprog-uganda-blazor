@page "/login"
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Blazored.FluentValidation


<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLoginAsync">

    <FluentValidationValidator />

    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="@loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirm-password" class="form-label">Confirm Password</label>
        <InputText id="confirm-password" type="password" class="form-control" @bind-Value="@loginModel.ConfirmPassword" />
        <ValidationMessage For="@(() => loginModel.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

</EditForm>


@code {

    private LoginModel loginModel = new LoginModel();

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }

    private async Task HandleLoginAsync()
    {

    }

    // dotnet add package FluentValidation
    public class LoginModelValidator : AbstractValidator<LoginModel>
    {
        public LoginModelValidator()
        {
            RuleFor(p => p.Username).NotEmpty().WithMessage("Username is required")
                .Length(3, 10).WithMessage("Username must be between 3 and 10 characters");

            RuleFor(p => p.Password).NotEmpty().WithMessage("Password is required");
        }
    }

}
